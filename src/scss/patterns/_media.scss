@use '../config';

/// # Media Blocks & Ratios
/// @group media

// Media Blocks
// ------------
/// Media blocks align an image with fluid text.
/// The vertical alignment and image size can be adjusted
/// using html attributes and CSS variables.
/// @group media
[data-media] {
  --column: wide;
  --list-padding--default: 1em;

  align-items: var(--align, start);
  display: grid;
  grid-gap: var(--media-gap, var(--gutter));
  grid-template-areas: var(--reverse-y, 'image' 'content');
  margin: var(--newline) 0;

  &[data-reverse~='vertical'] {
    --reverse-y: 'content' 'image';
  }

  @include config.above('wide-page') {
    grid-template-areas: var(--reverse-x, 'image content');
    grid-template-columns: fit-content(25%) minmax(min-content,
        var(--media-content, 1fr));

    &[data-reverse~='horizontal'] {
      --reverse-x: 'content image';

      grid-template-columns: minmax(min-content, var(--media-content, 1fr)) fit-content(25%);
    }
  }
}

// Media Image
// -----------
/// The image in a media-block accepts variables
/// for min/max and width values
/// @group media
.media-image {
  grid-area: image;
  justify-self: center;
  max-width: var(--media-max, initial);
  min-width: var(--media-min, initial);
  width: var(--media-size, initial);

  img,
  svg {
    height: auto;
    width: 100%;
  }
}

// Media Content
// -------------
/// @group media
.media-content {
  grid-area: content;

  >*:first-child {
    margin-top: 0;
  }

  >*:last-child {
    margin-bottom: 0;
  }
}

/// ## Ratios
/// @group media

// Ratio Parent
// ------------
/// Ratios are created with a parent wrapper
/// set as relative context.
/// @group media
[data-ratio='parent'] {
  --ratio: #{config.ratio('_widescreen')};

  position: relative;

  &::before {
    content: '';
    display: inline-block;
    height: 0;
    padding-top: calc(100% / var(--ratio, #{config.ratio('_widescreen')}));
    width: 1px;
  }
}

// Ratio Child
// -----------
/// The child element takes on the parent ratio
/// through absolute positioning.
/// @group media
[data-ratio='child'] {
  @include config.square(100%);

  inset: 0;
  position: absolute;
}

[data-media='desktop-work'] {
  grid-template-areas: 'image' 'content';
  grid-template-columns: 100%;

  .media-image {
    justify-self: auto;
  }
}

// Media Pull
// ----------
// Move an image to the left of the content for wide enough screens

.media-pull {
  --column: page-start;

  @include config.above('xlarge-page') {
    --column: full-start / page-start;

    grid-row: var(--rowspan);
    justify-self: end;

    // don't include an inline margin as fallback
    padding-inline: var(--media-pull-margin, 0);

    // include the margin when used with embed.figure macro
    &.embed {
      --media-pull-margin: var(--page-margin);
    }

    // include the margin when used with embed.img macro on supported browser
    // fallback will show an image that takes up the full content column
    @supports (selector(:has(*))) {
      --media-pull-margin: var(--page-margin);
    }
  }
}

// Image Utilities
// ---------------

.img-shadow {
  box-shadow: 0 0 var(--quarter-shim) var(--shadow);
}

// The img.embed macro currently wraps the <picture> element in a `p` tag when
// used in markdown files.
// The following CSS will allow application of image utilities,
// like extend-large to the img.embed macro
p:has(> picture:only-child) {
  display: contents;

  img {
    grid-column: var(--column, page);
    margin-block: var(--newline);
  }
}
